name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: never
  RUST_BACKTRACE: 1

jobs:
  ci:
    name: CI (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45 # stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: ${{ matrix.target }}

      - name: Resolve working directory
        id: wd
        shell: bash
        run: |
          if [ -f spell-app/magicrune/Cargo.toml ]; then
            echo "value=spell-app/magicrune" >> "$GITHUB_OUTPUT"
          else
            echo "value=." >> "$GITHUB_OUTPUT"
          fi

      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        with:
          shared-key: ${{ matrix.target }}
          workspaces: ${{ steps.wd.outputs.value }}
          save-if: ${{ startsWith(github.ref, 'refs/heads/') }}

      - name: Pre-fetch dependencies
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo fetch --locked --quiet

      - name: Format check
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo fmt --all -- --check

      - name: Clippy check
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Install cross (musl only)
        if: runner.os == 'Linux' && contains(matrix.target, 'musl')
        run: cargo install cross@0.2.5 --locked

      - name: Run unit/integration tests
        working-directory: ${{ steps.wd.outputs.value }}
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            cross test --all-targets --workspace --target ${{ matrix.target }} --locked --quiet
          else
            cargo test --all-targets --workspace --target ${{ matrix.target }} --locked --quiet
          fi

      - name: Run E2E tests (non-musl only)
        if: ${{ !contains(matrix.target, 'musl') }}
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo test --test e2e -- --nocapture --test-threads=1

      - name: Build release
        working-directory: ${{ steps.wd.outputs.value }}
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            cross build --release --workspace --target ${{ matrix.target }} --locked
          else
            cargo build --release --workspace --target ${{ matrix.target }} --locked
          fi

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked --version 0.21.1

      - name: Security audit
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo audit --locked

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45 # stable
        with:
          toolchain: stable

      - name: Resolve working directory
        id: wd
        shell: bash
        run: |
          if [ -f spell-app/magicrune/Cargo.toml ]; then
            echo "value=spell-app/magicrune" >> "$GITHUB_OUTPUT"
          else
            echo "value=." >> "$GITHUB_OUTPUT"
          fi

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked --version 0.31.3

      - name: Run coverage
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo tarpaulin --out Xml --all-features --workspace --locked

      - name: Check coverage threshold
        working-directory: ${{ steps.wd.outputs.value }}
        shell: bash
        run: |
          # For now, just run coverage without threshold check
          # Will add threshold check once tests are more complete
          cargo tarpaulin --print-summary || true
          echo "Coverage check completed"

  wasm-build:
    name: WASM build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45 # stable
        with:
          toolchain: stable
          targets: wasm32-wasi

      - name: Resolve working directory
        id: wd
        shell: bash
        run: |
          if [ -f spell-app/magicrune/Cargo.toml ]; then
            echo "value=spell-app/magicrune" >> "$GITHUB_OUTPUT"
          else
            echo "value=." >> "$GITHUB_OUTPUT"
          fi

      - name: Cache dependencies
        uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
        with:
          shared-key: wasm32-wasi
          workspaces: ${{ steps.wd.outputs.value }}

      - name: Build WASM
        working-directory: ${{ steps.wd.outputs.value }}
        run: |
          # Skip WASM build for now as project doesn't have WASM support yet
          echo "WASM build will be enabled when WASM features are added"
          # cargo build --target wasm32-wasi --release --locked

  license-check:
    name: License compliance
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45 # stable
        with:
          toolchain: stable

      - name: Resolve working directory
        id: wd
        shell: bash
        run: |
          if [ -f spell-app/magicrune/Cargo.toml ]; then
            echo "value=spell-app/magicrune" >> "$GITHUB_OUTPUT"
          else
            echo "value=." >> "$GITHUB_OUTPUT"
          fi

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked --version 0.16.3

      - name: Check licenses
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo deny check licenses --locked

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4f366e621dc8fa63f557ca04b8f4361824a35a45 # stable
        with:
          toolchain: stable

      - name: Resolve working directory
        id: wd
        shell: bash
        run: |
          if [ -f spell-app/magicrune/Cargo.toml ]; then
            echo "value=spell-app/magicrune" >> "$GITHUB_OUTPUT"
          else
            echo "value=." >> "$GITHUB_OUTPUT"
          fi

      - name: Install cargo-sbom
        run: cargo install cargo-sbom --locked

      - name: Generate SBOM
        working-directory: ${{ steps.wd.outputs.value }}
        run: cargo sbom > sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: sbom
          path: ${{ steps.wd.outputs.value }}/sbom.spdx.json